{"version":3,"sources":["Go/Go.jsx","App.js","reportWebVitals.js","index.js"],"names":["SortingVisualizer","props","state","array","this","resetArray","height","width","data","i","push","j","x","y","createArray","setState","className","map","dataRow","dataItem","style","left","top","length","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAiBqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,IAJQ,E,gEASjBC,KAAKC,e,kCAGKC,EAAQC,GAGhB,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAAQG,IAC5B,CACMD,EAAKE,KAAK,IACV,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOI,IAEvBH,EAAKC,GAAGE,GAAK,CACTC,EAAGH,EACHI,EAAGF,GAIjB,OAAOH,I,mCAOT,IAAIL,EAAQC,KAAKU,YAAY,GAAG,IAChCV,KAAKW,SAAS,CAACZ,Y,+BAKP,IAEGA,EAASC,KAAKF,MAAdC,MAEP,OACA,qBAAKa,UAAU,kBAAf,SACKb,EAAMc,KAAI,SAACC,GAAD,OACP,qBAAKF,UAAU,MAAf,SAEQE,EAAQD,KAAI,SAACE,GAAD,OACR,qBACAH,UAAU,MAGVI,MAAO,CAACC,KAAmB,GAAbF,EAASN,EAAS,KAAMS,IAAiC,IAA3BH,EAASP,EAAIO,EAASN,GAAW,MAJ7E,SAMF,6BAAKM,EAASP,EAAIM,EAAQK,OAASJ,EAASN,KAHrCM,EAASP,EAAIM,EAAQK,OAASJ,EAASN,iB,GArDzBW,IAAMC,YCJtCC,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCISW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.263ce27f.chunk.js","sourcesContent":["import React from 'react';\r\n//import {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './Go.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n//comment again\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  createArray(height, width) \r\n  {\r\n      let data = [];\r\n      for (let i = 0; i < height; i++)\r\n      {\r\n            data.push([]);\r\n            for (let j = 0; j < width; j++)\r\n            {\r\n                data[i][j] = {\r\n                    x: i,\r\n                    y: j,\r\n                };\r\n            }\r\n      }\r\n      return data;\r\n  }\r\n  resetArray() {\r\n    // const array = [];\r\n    // for (let i = 0; i < 20; i++) {\r\n    //   array.push(i);\r\n    // }\r\n    let array = this.createArray(10,10);\r\n    this.setState({array});\r\n  }\r\n  \r\n  \r\n\r\n  render() {\r\n   \r\n        const {array} = this.state;  \r\n\r\n        return (\r\n        <div className=\"array-container\">\r\n            {array.map((dataRow) => (\r\n                <div className=\"row\">\r\n                    {\r\n                        dataRow.map((dataItem) => (\r\n                            <div\r\n                            className=\"box\"\r\n                            //style={<h2>T</h2>}\r\n                            key={dataItem.x * dataRow.length + dataItem.y}\r\n                            style={{left: dataItem.y * 54 + 'px', top: (dataItem.x - dataItem.y) * 54  + 'px'}}>\r\n                               \r\n                          <h2>{dataItem.x * dataRow.length + dataItem.y}</h2>\r\n                      </div>\r\n                        ))\r\n                    }\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n        );\r\n        return array.map((dataRow) => {\r\n            return dataRow.map((dataItem) =>{\r\n                return (\r\n                    <div className=\"array-container\">\r\n                      <div\r\n                      className=\"box\"\r\n                      //style={<h2>T</h2>}\r\n                      key={dataItem.x * dataRow.length + dataItem.y}>\r\n                          <h2>{dataItem.x * dataRow.length + dataItem.y}</h2>\r\n                      </div>\r\n                     </div>\r\n                );\r\n            });\r\n        });\r\n\r\n//     return (\r\n//       <div className=\"array-container\">\r\n//         {array.map((x, y) => (\r\n//           <div\r\n//             className=\"array-bar\"            \r\n//             key={idx}\r\n//             style={{\r\n//               width: `10px`,  \r\n//               backgroundColor: PRIMARY_COLOR,\r\n//               height: `10px`,\r\n              \r\n//             }}></div>\r\n//         ))}        \r\n//       </div>\r\n//     );\r\n   }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","import './App.css';\r\nimport React from 'react';\r\nimport Go from './Go/Go'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">      \r\n      <Go></Go>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}